"""Generate firamath-glyph-list.tex.
"""

import _common


def to_unicode(x):
    raw_usv = hex(x)[2:].upper()
    if len(raw_usv) <= 3:
        return "0" * (4 - len(raw_usv)) + raw_usv
    return raw_usv


def longest_elem(x):
    len_list = map(len, x)
    return x[len_list.index(max(len_list))]


def _main():
    raw_glyph_unicode_list     = []
    raw_glyph_non_unicode_list = []
    for weight in _common.WEIGHT_LIST:
        font = _common.open_font(weight)
        glyph_list = [font[i] for i in font]
        raw_glyph_unicode_list.append([i.unicode for i in glyph_list if i.unicode >= 0])
        raw_glyph_non_unicode_list.append([i.glyphname for i in glyph_list if i.unicode == -1])

    glyph_unicode_list = sorted(list(set.union(*map(set, raw_glyph_unicode_list))))
    glyph_non_unicode_list = longest_elem(raw_glyph_non_unicode_list)

    print("% Generated by " + __file__)
    print("\\clist_const:Nn \\c_@@_glyph_unicode_clist")
    print("  {" + ", ".join(["\"" + to_unicode(i) for i in glyph_unicode_list]) + "}")
    print("\\clist_const:Nn \\c_@@_glyph_non_unicode_clist")
    print("  {" + ", ".join([i for i in glyph_non_unicode_list]) + "}")


if __name__ == "__main__":
    _main()
