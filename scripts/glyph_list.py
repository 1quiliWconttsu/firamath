"""Generate firamath-glyph-list.tex.
"""

from _common import *
from non_unicode import get_non_unicode


def print_glyph_unicode():
    """Print `\\c_@@_glyph_unicode_clist`.
    """
    raw_glyph_list = []
    for weight in WEIGHT_LIST:
        font = open_font(weight)
        fontforge_glyph_list = [font[i] for i in font]
        raw_glyph_list.append([i.unicode for i in fontforge_glyph_list if i.unicode >= 0])

    glyph_list = sorted(list(set.union(*map(set, raw_glyph_list))))

    print("\\clist_const:Nn \\c_@@_glyph_unicode_clist")
    print("  {" + ",".join(["\"" + usv_to_unicode_str(i) for i in glyph_list]) + "}")


def print_glyph_non_unicode():
    """Print `\\c_@@_glyph_non_unicode_clist` and `\\c_@@_glyph_non_unicode_with_type_clist`.
    """
    non_unicode = get_non_unicode()
    non_unicode_list = []
    for i in non_unicode:
        non_unicode_list += i["glyphs"]
    print("\\clist_const:Nn \\c_@@_glyph_non_unicode_clist")
    print("  {" + ",".join(non_unicode_list) + "}")

    print("\\clist_const:Nn \\c_@@_glyph_non_unicode_with_type_clist")
    print("  {")
    for i in non_unicode:
        print("    {" + i["type"].replace(" ", "~") + "} {" + ",".join(i["glyphs"]) + "},")
    print("  }")


def _main():
    print("% Generated by " + __file__)
    print_glyph_unicode()
    print_glyph_non_unicode()


if __name__ == "__main__":
    _main()
